\import Prelude
\import Utils
\import hw02 ()
\import hw05 (dec)
\import hw06 (Sublist, if, sublist-cons, sublist-empty, sublist-eq)
\import lect06 (DecEq, Decide, no, yes)
\import lect07 (NatEq, decideEq)
\import lect08
\open Nat(+,*)

-- 1. Укажите явно чему равен уровень в каждом из вызовов id' ниже.
--    Напишите явно чему равны типы всех функций idTest*.

\func id' {A : \Type} (a : A) => a

\func idTest1 : \Pi (A : \Type \lp) -> A -> A => id' (id' {\Pi (A : \Type \lp) -> A -> A} id)
\func idTest2 : \Type \lp -> \Type \lp => id' {\Type \lp -> \Type \lp} Maybe
\func idTest3 : \Type (\suc \lp) => id' {\Type (\suc \lp)} Functor
\func idTest4 : \Type (\suc \lp) => id' {\Type (\suc \lp)} (Functor Maybe)
\func idTest5 (f : \Pi {A B : \Type} -> (A -> B) -> Maybe A -> Maybe B) : \Type \lp => id' {\Type \lp} (Functor Maybe f)

-- 2. Определите div через Nat-ind.

\func \infixl 6 - (x y : Nat) : Nat
  | x, 0 => x
  | 0, _ => 0
  | suc x, suc y => x - y

\func n-0=0 (n : Nat) : n - 0 = n
  | 0 => idp
  | suc n => idp

\func n<=sucN (n : Nat) : n <= suc n
  | 0 => Nat.zero<=_
  | suc n => Nat.suc<=suc (n<=sucN n)

\func <=><= {n m : Nat} (p : n < m) : n <= m => <=-trans (n<=sucN n) (p)

\func decideLess (n m : Nat) : Decide (n < m) \elim n, m
  | 0, 0 => no (\lam p => \case p \with {})
  | 0, suc n => yes (Nat.suc<=suc Nat.zero<=_)
  | suc n, 0 => no (\lam p => \case p \with {})
  | suc n, suc m => \case decideLess n m \with {
    | yes a => yes (Nat.suc<=suc a)
    | no n => no (\lam p => n (\case p \with {| Nat.suc<=suc < => <}))
  }

\func div (n k : Nat) (p : 0 < k) : Nat => Nat-ind (\lam _ => Nat)
                                                   (\lam m f => \case decideLess k m \with {
                                                     | yes a => (f (m - k) (h m k p (<=-trans p (<=><= a)))) + 1
                                                     | no n => \case NatEq.decideEq k m \with {
                                                       | yes a => 1
                                                       | no n => 0
                                                     }
                                                   }) n
  \where {
    \func h' (n k : Nat) : n - (suc k) <= n - k
      | 0, _ => Nat.zero<=_
      | suc n, 0 => transport (\lam x => x <= suc n) (sym (n-0=0 n)) (n<=sucN n)
      | suc n, suc k => h' n k

    \func h (n k : Nat) (p : 0 < k) (q : 0 < n) : n - k < n \elim n, k
      | 0, _ => \case q \with {}
      | _, 0 => \case p \with {}
      | suc n, 1 => Nat.suc<=suc (transport (\lam x => n - 0 <= x) (n-0=0 n) <=-refl)
      | suc n, suc (suc k) => \case h (suc n) (suc k) (Nat.suc<=suc Nat.zero<=_) (Nat.suc<=suc Nat.zero<=_) \with {
        | Nat.suc<=suc < => Nat.suc<=suc (<=-trans (h' n k) <)
      }
  }

-- 3. Докажите следующий принцип индукции для списков.

\func List-ind {A : \Type} (E : List A -> \Type)
               (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> length ys < length xs -> E ys) -> E xs)
               (xs : List A) : E xs \elim xs
  | nil => r nil (\lam ys p => \case p \with {})
  | cons x xs \as xs' => aux E r (cons x xs') xs' <=-refl
  \where
  \func aux {A : \Type} (E : List A -> \Type)
            (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> length ys < length xs -> E ys) -> E xs)
            (xs ys : List A) (p : length ys < length xs) : E ys \elim xs, p
    | cons x xs, Nat.suc<=suc ys<=xs => r ys (\lam k k<m => aux E r xs k (<=-trans k<m ys<=xs))

-- 4. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условия:
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs

\func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => if (p x) (cons x (filter p xs)) (filter p xs)

\func filter-sublist {A : \Type} (xs : List A) (p : A -> Bool) : Sublist (filter p xs) xs \elim xs
  | nil => sublist-empty
  | cons x xs => \case p x \as b \return Sublist (if b (cons x (filter p xs)) (filter p xs)) (cons x xs) \with {
    | true => sublist-eq idp (filter-sublist xs p)
    | false => h x (filter p xs) xs (filter-sublist xs p)
  }
  \where {
    \func h {A : \Type} (y : A) (xs ys : List A) (p : Sublist xs ys) : Sublist xs (cons y ys) \elim xs, ys, p
      | nil, _, sublist-empty => sublist-empty
      | cons x xs, cons y' ys, p => sublist-cons p
  }

\data PredSatisfied {A : \Type} (p : A -> Bool) (xs : List A) \elim xs
  | nil => satisfied-nil
  | cons x xs => satisfied-cons (p x = true) (PredSatisfied p xs)

\func filter-pred-satisfied {A : \Type} (xs : List A) (p : A -> Bool) : PredSatisfied p (filter p xs) \elim xs
  | nil => satisfied-nil
  | cons x xs => \case p x \as b, idp : p x = b \return PredSatisfied p (if b (cons x (filter p xs)) (filter p xs)) \with {
    | true, q => satisfied-cons q (filter-pred-satisfied xs p )
    | false, _ => filter-pred-satisfied xs p
  }

\func true/=false (p : true = false) : Empty => transport (\lam n => \case n \with { | true => \Sigma  | false => Empty }) p ()

\func filter-sublists-of-filterd-list {A : \Type} (xs : List A) (p : A -> Bool) (ys : List A) (subl : Sublist ys xs)
                                      (pred : PredSatisfied p ys) : Sublist ys (filter p xs) \elim xs, ys
  | nil, _ => subl
  | _, nil => sublist-empty
  | cons x xs, cons y ys => \case p x \as b, idp : p x = b \return Sublist (cons y ys) (if b (cons x (filter p xs)) (filter p xs)) \with {
    | true, q => \case subl, pred \with {
      | sublist-eq y=x subl, satisfied-cons py=t pred => sublist-eq y=x (filter-sublists-of-filterd-list xs p ys subl pred)
      | sublist-cons subl, satisfied-cons py=t pred => sublist-cons (filter-sublists-of-filterd-list xs p (cons y ys) subl (satisfied-cons py=t pred))
    }
    | false, q => filter-sublists-of-filterd-list xs p (cons y ys) (\case subl, pred \with {
      | sublist-eq y=x subl, satisfied-cons py=t pred => absurd (true/=false (sym (py=t) *> (transport (\lam x' => p x' = false) (sym y=x) q)))
      | sublist-cons subl, satisfied-cons py=t pred => subl
    }) pred
  }

-- 5. Бонусное задание: докажите корректность любого алгоритма сортировки, отличного от сортировки вставками.
