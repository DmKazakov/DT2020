-- 1. Bool, not, ||, if then else

\data Bool
  | false
  | true
  -- имена типов данных и конструкторов могут начинаться с любой буквы в отличии от хаскелла.
{- Haskell:
   data Bool = False | True
-}

-- \data Foo | cons (Foo -> Foo)

{-
-- Определения типов данных должны быть строго положительными.
-- Это означает, что они не могут встречаться слева от -> в конструкторах.
-- 
-- Если такие типы данных разрешены, то мы можем определить "тип нетипизированных лямбда-термов" K.
-- В нем можно закодировать все такие термы, в том числе и незавершающиеся, а такие функции запрещены (см. п. 3 ниже).
\data K | k (K -> K)
\func I => k (\lam x => x)
\func Kc => k (\lam x => k (\lam _ => x))
\func app (f a : K) : K \elim f
  | k f' => f' a
\func omega => k (\lam x => app x x)
-}

\func not (x : Bool) : Bool -- \with
  | true => false
  | false => true
{- Haskell:
   not :: Bool -> Bool
   not True = False
   not False = True
-}

\func if (x : Bool) (t e : Nat) : Nat \elim x
  | true => t
  | false => e
{- Haskell:
   if :: Bool -> Nat -> Nat -> Nat
   if True t e = t
   if False t e = e
-}

\func example (x y a b c d : Bool) : Bool \elim x, y
  | true, false => a
  | true, true => b
  | false, y => \case y, a \with {
    | true, a => c
    | false, a => a
  }
{- Haskell:
   example True True a b c d = undefined
   example True False a b c d = undefined
   example False y a b c d = case (y,a) of
        (True,a) -> undefined
        (False,a) -> undefined
-}

\func \infixr 3 && (x y : Bool) : Bool \elim x
  | true => y
  | false => false
{- Haskell:
   (&&) :: Bool -> Bool -> Bool
   True && y = y
   False && _ = False
-}

-- 2. Nat, +, *

\data Nat' | zero' | suc' Nat' -- уже определено в Prelude

-- такое представление более эффективно, но не так удобно для доказательств.
\data BinNat
    | zero''
    | sh+1 BinNat -- x*2+1
    | sh+2 BinNat -- x*2+2

-- эти определения эквивалентны
\func three => suc (suc (suc zero))
\func three' => 3

-- нет ограничений на величину чисел
\func bigNumber => 1000000000000000000000000

\func \infixl 6 + (x y : Nat) : Nat \elim y
  | 0 => x
  | suc y => suc (x + y)
{- Haskell:
   (+) :: Nat -> Nat -> Nat
   x + Zero = x
   x + Suc y = Suc (x + y)
-}

-- если n -- переменная, то n + 2 вычисляется, а 2 + n уже находится в нормальной форме.
-- n + 2 => suc (suc n)
-- 2 + n
-- то есть важно как определен + и на каком аргументе производится паттерн матчинг.

\func \infixl 7 * (x y : Nat) : Nat \elim y
  | 0 => 0
  | suc y => x * y + x
{- Haskell:
   (*) :: Nat -> Nat -> Nat
   x * Zero = 0
   x * Suc y = x * y + x
-}

-- выражения n * 2 и 2 * n не вычисляются в конструкторы
-- n * 2 === n * suc (suc zero) => n * 1 + n => (n * 0 + n) + n => (0 + n) + n
-- 2 * n
-- выражения suc n * 2 и 2 * suc n вычисляются, но 2 * suc n вычисляется лучше
-- suc n * 2 => (0 + suc n) + suc n => suc ((0 + suc n) + n)
-- 2 * suc n => 2 * n + 2 => suc (suc (2 * n))

-- 3. Termination, div

-- Все функции должны завершаться, т.к. иначе мы можем доказать любое утверждение.
-- Кроме того, алгоритм проверки типов становится неразрешимым, т.к. он должен вычислять произвольные функции, определенные в языке.
-- \func f : Nat => f

\func \infixl 6 - (x y : Nat) : Nat
  | 0, _ => 0
  | suc x, 0 => suc x
  | suc x, suc y => x - y

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

-- \func div2 (x y : Nat) : Nat => if (x < y) 0 (suc (div2 (x - y) y))
{-
 Очевидное, но не корректное определение div, так как оно не завершается на входе вида div x 0.
 Даже если бы div завершалась, это определение не было бы корректным, так как рекурсивная функция принимаются только если она определена при помощи структурной рекурсии.
 То есть один из аргументов в рекурсивном вызове должен быть структурно строго меньше, чем исходный аргумент, а остальные меньше либо равны.
-}

-- Часто рекурсивную функцию можно превратить в структурно рекурсивную, добавив новый параметр, который будет уменьшаться при каждом рекурсивном вызове.
-- В начальный момент времени его можно задать любым образом так, чтобы он был больше, чем глубина рекурсии, необходимая для вычисления этой функции.
-- Например, глубина рекурсии при вычислении div x y составляет x/y шагов, что меньше либо равно x, так что можно эту функцию определить следующим образом:

\func div (x y : Nat) => div' x x y
 \where
   \func div' (s x y : Nat) : Nat \elim s
     | 0 => 0
     | suc s => if (x < y) 0 (suc (div' s (x - y) y))

-- Таким образом можно протестировать нашу функцию.
\func divTest1 : div 100 5 = 20 => idp
\func divTest2 : div 100 3 = 33 => idp
\func divTest3 : div 100 1 = 100 => idp
\func divTest4 : div 100 0 = 100 => idp

-- 4. Полиморфизм, id, неявные аргументы

-- \Type -- тип типов.
\func id (A : \Type) (a : A) => a
{- Haskell:
   id :: a -> a
   id x = x
-}

\func idEx => id Nat 0

\func idEx' => id Int (-1)

\func idEx'' => id (Nat -> Nat) (id Nat)

\func idEx''' => id (\Pi (A : \Type) (a : A) -> A) id

\func idType : \Pi (A : \Type) -> A -> A => id
{- Haskell:
   idType :: a -> a
   idType = id
-}

-- _ говорит тайпчекеру вывести значение самому.
-- Если он не сможет этого сделать, он выдаст ошибку.
-- В данном случае он выводит Nat, так как он знает, что первый параметр является типом второго, а второй имеет тип Nat.
\func idTest => id _ 0

-- Параметры в фигурных скобках являются неявными.
\func id' {A : \Type} (a : A) => a

\func id'Test => id' 0
\func id'Test' => id' {Nat} 0 -- неявные параметры можно передавать явно, взяв аргумент в фигурные скобки.

-- В данном случае лучше n не делать неявным, так как тайпчекер не сможет его вывести из типа p, так как n встречается только внутри вызова функции.
-- Например, если мы вызовем example' pp, где pp : 8 = 3, то тайпчекер не может вывести, что n должно равняться 4.
\func example' {n : Nat} (p : n + n = 3) => 0

-- В данном случае n и m можно сделать неявнымы, так как они встречается только под \data (= определено через Path, который является \data) и конструктором (suc).
-- \data и конструкторы являются инъективными, поэтому тайпчекер всегда может вывести n и m в таких случаях.
-- Например, если мы вызовем example'' pp, где pp : 8 = 3, то тайпчекер понимает, что m должно равняться 3, а suc n должно равняться 8.
-- Так как 8 = suc 7 и suc инъективен, то он понимает, что n должно равняться 7.
\func example'' {n m : Nat} (p : suc n = m) => 0
\func example''Test (pp : 8 = 3) => example'' pp

-- 5. Списки, append

\data List (A : \Type) | nil | cons A (List A)
{- Haskell:
   data List a = Nil | Cons a (List a)
-}

\func \infixl 6 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)
{- Haskell:
   (++) :: List a -> List A -> List a
   Nil ++ ys = ys
   cons x xs ++ ys = cons x (xs ++ ys)
-}
